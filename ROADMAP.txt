 ************* 🛠️🛠️🛠️ INSTALLATION 🛠️🛠️🛠️ (we will use tailwind in a React app created with Vite) *************
(BIG DISCLAIMER. IT IS ALWAYS BETTER TO FOLLOW the steps on the OFFICIAL website designed for starting a tailwind app with Vite and React, because updates may occur. Anyway i'm currently stealing their job haha.)


1 - Let create our React project first: 
        npm create vite@latest myTailwindAppName -- --template react 
2 - cd AppFolder
3 - npm install (to install all the necessary package specified in the package.json file for our React App).

4 - Now we will install tailwind package as development tool ( -D. That means that it will not be runned in production mode because it is not necessary and all the codes we are writing in tailwind are actually converted in CSS. As simple as that)
    npm install -D tailwindcss postcss autoprefixer 
        (postcss to enable injection of @tailwind base; ... inside our css files. autoprefixer for browser compatibility purposes) 

5 - npx tailwindcss init -p
        (to create tailwind.config.js and postcss.config.js file. They are important files for our future configurations).
        - p important to: also create the postcssconfig.js 

6 - Now let's modify the content of some files:

    a - tailwind.config.js (look for the modification on the officail website.) 
        content -> Specifies the files Tailwind should scan to find class names (e.g., ./src/**/*.{js,jsx}) for purging unused styles in production.
        theme.extend -> Allows you to customize or extend the default Tailwind styles (e.g., adding new colors, spacing, or fonts).
        plugin -> Allows you to add custom Tailwind plugins or community plugins to enhance functionality (e.g., forms, typography).

    b - To my main css file "index.css" 
        @tailwind base; -> Includes Tailwind's base styles (like resets and defaults) to ensure consistent styling across browsers.
        @tailwind components; -> Includes reusable pre-designed component classes (e.g., buttons, forms) provided by Tailwind.
        @tailwind utilities; -> Includes all utility classes (e.g., text-center, bg-blue-500) for applying styles directly in HTML.

!!!!!!    NOTE: If you go to -- https://tailwindcss.com/docs/guides/vite#react --, you will see a page containing all of what you want, from the installation step to the very specific features of tailwaind you want to use.    !!!!!






******************** ✒️✒️✒️ START STYLING ✒️✒️✒️ *************************

Here are a list of my basics and most used CSS properties with their equivalent in Tailwindcss.
You can try to know this and the rest will certainly come intuitively.
No need memorize exactly everything. Just with few practices, it will become natural.

color: blue;  <==> 	text-blue-500
background-color: blue;	 <==>  bg-blue-500
text-align: center;  <==>	text-center
font-size: 18px;    <==>	text-[18px] (or the closest like text-lg, text-base, etc.)
border: 3px solid blue;   <==>	border-3 border-solid border-blue-500
border-radius: 50%;	 <==>  rounded-full
margin: 14px;  <==> 	m-[14px]
margin-top: 4px;    <==>	mt-[4px]
padding: 14px;   <==>	p-[14px]
font-weight: bold;   <==> 	font-bold
font-style: italic;	   <==>    italic
font-family: Arial, sans-serif;   <==> 	 font-[Arial, sans-serif] (you’ll need custom fonts if not in Tailwind defaults)
box-shadow: 15px 5px 10px 5px;    <==>   shadow-[15px_5px_10px_5px] (custom shadow value using arbitrary syntax)
display: flex;	 <==>     flex
flex-direction: column;	  <==>   flex-col
justify-content: center;   <==> 	justify-center
align-items: center;   <==>  	items-center
.example:hover { background-color: red; }   <==> 	hover:bg-red-500







****************** 📈✒️📈 LET'S TAKE STYLING TO A NEXT LEVEL WITH CUSTOMIZATION 📈✒️📈 *************

****  🗂️ WITH LAYERS 🗂️ ****
We can take styling in tailwindcss to a next level using layers in our main css file (where we've added @tailwind base....)
It actually helps to gather specific css styles we have in mind, to a one class that we can now repeat in our html files.
Layer is a way to create new classes that can be add in the html file with class="" or className="" in React.
Now, that class can be part of either the base, the component, or the utilities of tailwaind. (Remember when we were adding @tailwind base....)

How all of that works ?
You write this:
@layer base {}. In the curly braces will stay the custom classes you're adding and want to be added to the "base in Tailwind". Same for components & utilities
{
    .custom-class {
        background-color: blue;
        border-radius: 10px;
    }
}
Above is your custom class for instance. There is a second form:
{
    .custom-class {
        @apply background-blue-500 border-2 border-solid rounded-lg;
    }
}
That is When you want to combine multiple Tailwind utility classes into a single custom class.
So don't usse @apply when you are defining custom styles that are not based on Tailwind's utility classes.
Now, you can use your custom class in your html file by just calling them into the class="".

*** 🔧 TAILWIND CONFIG JS 🔧 ***
You can also add custom classes in the tailwind.config.js file. 
Refer to the INSTALLATION part to see what each section can contain.
Refer to QUESTIONS - ANSWERS file if you have any question to deepen your understanding.


*** 📱💻 RESPONSIVE DESIGN 📱💻 ***
It is easier to implement Responsive design with Tailwind. First thing to know is:

1- Breakpoints  
    a- "sm": 640-768px for the screen width (tablets,...)
    b- "md": 768-1024px (small laptops)
    c- "lg": 1024-1280px (desktops, large devices)
    d- "xl": 1280-1536px (wide desktops, extra-large devices)
    e- "2xl"
    f- "3xl"

2- Example/logic of use
    <div class="text-base sm:text-sm md:text-md lg:text-lg">
        Responsive Text
    </div>

    By default we have a text-sm size.
    When the screen width is between 640-768px (sm), the text will be of size sm
    When the screen width is between 768-1024px (md), the text will be of size md
    When the screen width is between 1024-1280px (lg), the text will be of size lg

    This is pretty good logic for a body or paragraph styling. But maybe for Heading or title, you should take for each screen Breakpoints, a one time upper size for the text(md screen => lg text).



